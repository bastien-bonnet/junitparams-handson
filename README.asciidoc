= Hands on junitparams

L'objectif de cet atelier pratique est de découvrir junitparams. Junitparams fournit un runner à Junit permettant d'écrire des test paramétriques :

* légers à implémenter : il suffit d’une annotation sur la classe, sur la méthode de test et d’une méthode fournissant les paramètres,
* lisibles : chaque méthode de test dispose de ses propres paramètres, donc ceux-ci restent très lisibles. De plus, le fait que les paramètres apparaissent dans la signature de la méthode de test facilite encore plus la compréhension du fonctionnement du test,
* indépendants : les tests paramétriques ont chacun leur propre source de paramètres, ce qui permet également de mélanger tests paramétriques et non paramétriques dans la même classe.

Chaque section de cet atelier est associée à un morceau de code à compléter ou à écrire. Utiliser la vue tâches (java tasks) de l'IDE pour visualiser les _TODO_, qui sont numérotés et précisés au début de chaque section.


== Mon premier test paramétrique
_TODO 1.x_

Nous désirons développer la méthode utilitaire +isValidPhoneNumber(String phoneNumber)+ de la classe +PhoneUtils+ qui vérifie si un numéro de téléphone donné est valide. Pour ce faire, nous allons tout d'abord écrire un test unitaire paramétrique, +isValidPhoneNumberTest+, dont le squelette est déjà présent dans la classe +PhoneUtilsTest+. Les numéros considérés comme valides sont les numéros français nationaux (ex: 0120304050), et les numéros internationaux (ex: +33120304050, 0033120304050).

On remarque que contrairement aux tests unitaires Junit habituels, cette méthode dispose de paramètres : il s'agit d'un test paramétrique. Vous l'aurez deviné, le premier paramètre est le numéro à tester, et le second le résultat attendu pour ce numéro. L'ensemble de ces deux paramètres forme un jeu de test. Le runner de junitparams, +JUnitParamsRunner+ (visible dans l'annotation +@RunWith(JUnitParamsRunner.class)+ de la classe de test) injectera les paramètres qu'il trouvera fournis par la méthode respectant la convention de nommage +parametersFor+ + +nomDeLaMéthodeDeTest+.

La méthode fournissant les paramètres est ici +parametersForIsValidPhoneNumberTest()+. Les deux premiers jeux de tests sont déjà fournis pour faciliter le démarrage.

Il vous faut donc :

- implémenter la méthode de test +isValidPhoneNumberTest+
- lancer la classe de test et vérifier que le test est au rouge (TDD). En profiter pour observer l'affichage des résultats de tests dans l'EDI (Eclipse, très similaire sur IntelliJ) :
+
image::images/test-result-1.png[]
+
On observe que la présentation des résultats dans l'EDI se fait par méthode de test, puis par jeu de test. Cela permet d'identifier très rapidement le jeu de test qui pose problème quand un test échoue. Ici nous utilisons uniquement des types primitifs pour les paramètres, mais lorsque des types complexes (objets) sont utilisés, junitparams appelle automatiquement la méthode +toString()+ de ces objets pour la présentation des résultats de l'exécution des tests, ce qui donne une bonne lisibilité.
- implémenter juste ce qu'il faut dans la méthode pour que le test passent
- ajouter un jeu de test dans +parametersForIsValidPhoneNumberTest+ et recommencer à partir du deuxième point jusqu'à ce que tous les cas de tests passent.

Aide : les cas suivants doivent passer :

	0606060606
	+33606060606
	+01600000000
	0033606060606

et les cas suivants ne doivent *pas* passer :

	060606060
	33606060606
	00033606060606
	+33000000000
	0020304050

C'est l'occasion de réviser vos expressions rationnelles :)
footnote:[Une bière sera offerte au premier participant qui gère tous les cas en une seule expression rationnelle (et qui a lu l'énoncé :P)].

== Un autre test paramétrique, tout seul cette fois
_TODO 2.x_

Sur le modèle de l'exercice précédent, il vous faut à présent écrire un nouveau test unitaire paramétrique pour la méthode +isMobilePhoneNumber(String phoneNumber)+ qui vérifie si un numéro de téléphone est un numéro de mobile. Les numéros considérés comme valides sont les numéros français nationaux de mobile (ex: 0620304050), et les numéros de mobile français avec suffixe international (ex: +33620304050, 0033620304050).


== Charger les paramètres depuis une classe externe
_TODO 3.x_

junitparams fournit la possibilité de charger les paramètres d'une méthode de test depuis une classe externe. C'est très pratique lorsque l'on souhaite externaliser la logique de génération des paramètres (par exemple pour la réutiliser ailleurs, ou parce qu'elle est complexe). Pour ce faire, il faut ajouter un paramètre à l'annotation +@Parameters+ de junitparams :

	@Parameters(source = MyProvider.class)

Pour illustrer cela, nous allons a présent considérer la méthode +internationalize(String localPhoneNumber)+ fournie dans les sources. Cette méthode doit ajouter un préfixe international (++33+) à des numéros locaux français (par exemple +0120304050+).

Vous devez :

- compléter la méthode de test unitaire prévue à cet effet (+internationalizeTest+). Ne pas oublier de spécifier que les paramètres sont fournis par la classe externe +PhoneNumberProvider+.
- junitparams va aller chercher les paramètres dans les méthodes dont le nom commence par +provide+. Vous allez donc compléter la méthode +provideLocalNumbers()+ de la classe +PhoneNumberProvider+. Vous pouvez par exemple lui faire retourner un tableau de 20 numéros générés aléatoirement (la méthode de génération de numéros locaux aléatoire vous est fournie).
- implémenter la méthode +internationalize(String localPhoneNumber)+.

== Charger les paramètres depuis un fichier CSV
_TODO 4.x_

Il est également possible de charger les paramètres depuis un fichier externe (CSV), en remplaçant l'annotation +@Parameters+ par +@FileParameters("src/test/resources/data.csv")+. Le cas d'utilisation type est lorsque l'on dispose d'un très grand nombre de jeux de données à tester, ou bien lorsque les données de tests sont générées par un programme externe.

Il s'agit maintenant de développer et tester la méthode +getLocalZoneIndicator(String phoneNumber)+, qui extrait l'indicateur de zone d'un numéro de téléphone français (ex.: "05" pour 0520304050, "01" pour \+33120304050). Un fichier CSV contenant des données de test vous est fourni (+local_zone_indicators.csv+).

Vous devez :

- complétér la méthode de test unitaire prévue a cet effet (+getLocalZoneIndicatorTest+). Ne pas oublier de spécifier que les paramètres sont fournis par un fichier CSV.
- implémenter la méthode +getLocalZoneIndicator+.

== Utiliser des valeurs littérales directement
_TODO 5.x_

Pour les cas simples, c'est-à-dire avec peu de paramètres, junitparams offre la possibilité de définir les paramètres d'un test directement dans l'annotation. La syntaxe est la suivante :

	@Parameters({
		"1, false",
		"2, true" })

Cette fonctionnalité est à utiliser avec parcimonie car vous perdez les bénéfices de la compilation.

Vous allez devoir implémenter la méthode +areSameNumber(String number1, String number2)+, qui vérifie si deux numéros correspondent. Par exemple, +0120304050+ et +33120304050+ correspondent, la méthode doit donc retourner +true+.

Vous devez :

- compléter la méthode de méthode de test unitaire +areSameNumberTest+. Ne pas oublier de spécifier les paramètre de manière littérale directement dans l'annotation.
- implémenter la méthode +areSameNumber+.



== Aller plus loin
junitparams propose encore d'autres manières que celles qui ont été évoquées ici pour charger les paramètres. Il permet par exemple d'utiliser des classe de transformation pour convertir les données brutes avant de les charger dans les tests. Pour touver un exemple exhaustif et résumé des cas d'utilisation, c'est https://code.google.com/p/junitparams/source/browse/src/test/java/junitparams/usage/Samples_of_Usage_Test.java[ici].
